#!/bin/sh

# PROVIDE: solarnode
# REQUIRE: NETWORKING
# KEYWORD: shutdown

# SysV init script for the SolarNode daemon for Eclipse Equinox. Designed
# to be run as an /etc/init.d service by the root user.
#
# chkconfig: 3456 99 01
# description: Control the SolarNode Equinox server
#
# Set JAVA_HOME to the path to your JDK or JRE.
# 
# Set SOLARNODE_HOME to the directory that contains the following:
# 
# + <SOLARNODE_HOME>/
# |
# +--+ conf/                      <-- configuration
# |  |
# |  +-- config.init              <-- main Equinox configuration
# |  +--+ services/               <-- runtime configuration
# |
# +--+ app/                      
#    |
#    +--+ boot/                   <-- OSGi bootstrap bundles
#    +--+ core/                   <-- Core OSGi bundles
#    +--+ main/                   <-- SolarNode OSGi bundles
#
#
# Set PID_FILE to the path to the same path as specified in 
# solarnode.properties for the node.pidfile setting.
# 
# Set RUNAS to the name of the user to run the process as. The script
# will use "su" to run the node as this user, in the background.
# 
# The application is expected to be configured such that the main
# database and log files are stored in an OS-configured RAM disk,
# such as /dev/shm. This script will use rsync when the "stop"
# command is used to sync the DB_DIR contents into DB_BAK_DIR.
# When the "start" command is used, this script checks for the 
# existence of DB_BAK_DIR and if DB_DIR does not exist, will copy
# DB_BAK_DIR to DB_DIR before starting up the application.
# 
# A typical RAM disk hierarchy looks like the following:
# 
# + <RAM_DISK>/
# |
# +--+ db/                        <-- Main database
# +--+ log/                       <-- Application logs
# 
# Modify the APP_ARGS and JVM_ARGS variables as necessary.

JAVA_HOME=/usr/local
SOLARNODE_HOME=/usr/local/solarnode
RAM_DIR=/usr/local/solarnode/var
CONF_DIR=/usr/local/solarnode/conf
RUNAS=solarnode

TMP_DIR=${RAM_DIR}/tmp
LOG_DIR=${RAM_DIR}/log
DB_DIR=${RAM_DIR}/db
VAR_DIR=${SOLARNODE_HOME}/var
DB_BAK_DIR=${VAR_DIR}/db-bak
EQUINOX_JAR=equinox.jar
EQUINOX_CONF=${RAM_DIR}
EQUINOX_CONSOLE=4202
PID_FILE=${RAM_DIR}/solarnode.pid
APP_ARGS="-Dsn.home=${SOLARNODE_HOME} -Dderby.system.home=${DB_DIR} -Dsolarnetwork.pidfile=${PID_FILE} -Djava.util.logging.config.file=${SOLARNODE_HOME}/conf/jre-logging.properties -Dosgi.clean=true"
JVM_ARGS="-Xmx192m -Djava.io.tmpdir=${TMP_DIR}"

# FreeBSD support here
. /etc/rc.subr

name="solarnode"
rcvar="${name}_enable"
extra_commands="status"
pidfile="${PIDFILE}"
start_cmd="${name}_start"
stop_cmd="${name}_stop"
status_cmd="${name}_status"

load_rc_config $name
: ${solarnode_enable:=no}

# NOTE: for debugging support, add these flags:
#JVM_ARGS="$JVM_ARGS -Xdebug -Xnoagent -Xrunjdwp:server=y,transport=dt_socket,address=9142,suspend=n"

START_CMD="${JAVA_HOME}/bin/java ${JVM_ARGS} ${APP_ARGS} -jar ${SOLARNODE_HOME}/app/${EQUINOX_JAR} -configuration ${EQUINOX_CONF} -console ${EQUINOX_CONSOLE} -clean"
START_SLEEP=3
STOP_TRIES=5

# function to create directory if doesn't already exist
setup_dir () {
	if [ ! -e $1 ]; then
		if [ -z "${RUNAS}" ]; then
			mkdir $1
		else
			su - $RUNAS -c "mkdir -p $1"
		fi
	fi
}

# function to stop process and wait for it to terminate
stop_proc () {
	pid=$1
	count=$2
	while { [ $((count-=1)) -gt 0 ] && kill "$pid" 2>/dev/null; } do
		sleep 1
	done
}

# function to start up process
solarnode_start () {
	if [ -z "${RUNAS}" ]; then
		${SOLARNODE_HOME}/bin/solarnode-utilities.sh start
	else
		su $RUNAS -c "${SOLARNODE_HOME}/bin/solarnode-utilities.sh start"
	fi

	echo -n "Starting SolarNode server... "
	
	if [ -z "${RUNAS}" ]; then
		cd "${SOLARNODE_HOME}"
		${START_CMD} 1>${LOG_DIR}/stdout.log 2>&1 &
	else
		su $RUNAS -c "cd ${SOLARNODE_HOME}; ${START_CMD} 1>${LOG_DIR}/stdout.log 2>&1 &"
	fi
	echo -n "sleeping for ${START_SLEEP} seconds to check PID... "
	sleep ${START_SLEEP}
	if [ -e $PID_FILE ]; then
		echo "Running as PID" `cat $PID_FILE`
	else
		echo "SolarNode does not appear to be running."
	fi
}

# function to stop process
solarnode_stop () {
	pid=
	run=
	if [ -e $PID_FILE ]; then
		pid=`cat $PID_FILE`
		run=`ps -o pid= -p $pid`
	fi
	if [ -n "$run" ]; then
		echo -n "Stopping SolarNode $pid... "
		stop_proc $pid $STOP_TRIES
		run=`ps -o pid= -p $pid`
		
		# Backup DB to persistent storage
		if [ -z "$run" -a -e ${DB_DIR} ]; then
			/bin/sh ${SOLARNODE_HOME}/bin/solarnode-utilities.sh stop
		else
			echo "done."
		fi
	else
		echo "SolarNode does not appear to be running."
	fi
}

# function to check status
solarnode_status () {
	pid=
	run=
	if [ -e $PID_FILE ]; then
		pid=`cat $PID_FILE`
		run=`ps -o pid= -p $pid`
	fi
	if [ -n "$run" ]; then
		echo "SolarNode is running (PID $pid)"
	else
		echo "SolarNode does not appear to be running."
	fi
}

run_rc_command "$1"
